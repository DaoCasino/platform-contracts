#pragma once
#include <eosio/testing/tester.hpp>

using eosio::testing::read_wasm;
using eosio::testing::read_wast;
using eosio::testing::read_abi;

namespace testing {

static const eosio::chain::name platform_name = N(${PLATFORM_CONTRACT});
static const eosio::chain::name events_name = N(${EVENTS_CONTRACT});

struct contracts {
    static std::string version() { return "${CONTRACT_VERSION}"; };

    struct platform {
        static std::vector<uint8_t> wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/platform/platform.wasm"); }
        static std::string          wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/platform/platform.wast"); }
        static std::vector<char>    abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/platform/platform.abi"); }
    };

    struct events {
        static std::vector<uint8_t> wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/events/events.wasm"); }
        static std::string          wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/events/events.wast"); }
        static std::vector<char>    abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/events/events.abi"); }
    };

    struct casino {
        static std::vector<uint8_t> wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/casino/casino.wasm"); }
        static std::string          wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/casino/casino.wast"); }
        static std::vector<char>    abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/casino/casino.abi"); }
    };

    struct system {
        struct token {
            static std::vector<uint8_t> wasm() { return read_wasm("${CMAKE_BINARY_DIR}/daobet.contracts/eosio.token/eosio.token.wasm"); }
            static std::vector<char>    abi() { return read_abi("${CMAKE_BINARY_DIR}/daobet.contracts/eosio.token/eosio.token.abi"); }
        };
    };
};

} //namespace testing
